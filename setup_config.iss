; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Pump Assembly"
#define MyAppVersion "1.0.0"
#define MyAppPublisher "Guth South Africa PTY LTD"
#define MyAppURL "https://github.com/TravisMain/GuthPumpRegistry"
#define MyAppExeName "base_gui.exe"
#define MyAppAssocName MyAppName + " File"
#define MyAppAssocExt ".myp"
#define MyAppAssocKey StringChange(MyAppAssocName, " ", "") + MyAppAssocExt

[Setup]
AppId={{FF1E9483-6D23-45EC-B750-55DE3F2D4B39}}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
UninstallDisplayIcon={app}\{#MyAppExeName}
ArchitecturesAllowed=x64compatible
ArchitecturesInstallIn64BitMode=x64compatible
ChangesAssociations=yes
DisableProgramGroupPage=yes
LicenseFile=C:\Users\travism\source\repos\GuthPumpRegistry\license.txt
InfoBeforeFile=C:\Users\travism\source\repos\GuthPumpRegistry\info before.txt
InfoAfterFile=C:\Users\travism\source\repos\GuthPumpRegistry\info after.txt
OutputDir=C:\Users\travism\source\repos\GuthPumpRegistry\output
OutputBaseFilename=GuthPumpRegistrySetup.exe
SetupIconFile=C:\Users\travism\source\repos\GuthPumpRegistry\app_icon.ico
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "C:\Users\travism\source\repos\GuthPumpRegistry\dist\base_gui.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Users\travism\source\repos\GuthPumpRegistry\database.py"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Users\travism\source\repos\GuthPumpRegistry\export_utils.py"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Users\travism\source\repos\GuthPumpRegistry\config.json"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Users\travism\source\repos\GuthPumpRegistry\assets\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "C:\Users\travism\source\repos\GuthPumpRegistry\gui\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "C:\Users\travism\source\repos\GuthPumpRegistry\utils\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

[Registry]
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocExt}\OpenWithProgids"; ValueType: string; ValueName: "{#MyAppAssocKey}"; ValueData: ""; Flags: uninsdeletevalue
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}"; ValueType: string; ValueName: ""; ValueData: "{#MyAppAssocName}"; Flags: uninsdeletekey
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\{#MyAppExeName},0"
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\{#MyAppExeName}"" ""%1"""

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Code]
var
  SQLConfigPage: TWizardPage;
  SQLServerEdit: TEdit;
  SQLDataDirEdit: TEdit;
  SQLDataDirButton: TButton;
  SQLDatabaseEdit: TEdit;
  SQLUsernameEdit: TEdit;
  SQLPasswordEdit: TEdit;

function EscapeJsonString(const S: String): String;
var
  I: Integer;
  ResultStr: String;
begin
  ResultStr := '';
  for I := 1 to Length(S) do
  begin
    if S[I] = '\' then
      ResultStr := ResultStr + '\\'
    else if S[I] = '"' then
      ResultStr := ResultStr + '\"'
    else
      ResultStr := ResultStr + S[I];
  end;
  Result := ResultStr;
end;

procedure SQLDataDirButtonClick(Sender: TObject);
var
  Dir: String;
begin
  Dir := SQLDataDirEdit.Text;
  if BrowseForFolder('Select SQL Server Data Directory', Dir, True) then
    SQLDataDirEdit.Text := Dir;
end;

procedure InitializeWizard;
var
  SQLServerLabel: TNewStaticText;
  SQLDataDirLabel: TNewStaticText;
  SQLDatabaseLabel: TNewStaticText;
  SQLUsernameLabel: TNewStaticText;
  SQLPasswordLabel: TNewStaticText;
begin
  SQLConfigPage := CreateCustomPage(wpSelectDir, 'SQL Server Configuration', 
    'Specify the SQL Server Express connection details for Pump Assembly.');

  SQLServerLabel := TNewStaticText.Create(SQLConfigPage);
  SQLServerLabel.Parent := SQLConfigPage.Surface;
  SQLServerLabel.Caption := 'SQL Server Instance Name (e.g., localhost\SQLEXPRESS):';
  SQLServerLabel.Top := 10;
  SQLServerLabel.Left := 0;

  SQLServerEdit := TEdit.Create(SQLConfigPage);
  SQLServerEdit.Parent := SQLConfigPage.Surface;
  SQLServerEdit.Width := SQLConfigPage.SurfaceWidth - 10;
  SQLServerEdit.Top := SQLServerLabel.Top + SQLServerLabel.Height + 5;
  SQLServerEdit.Left := 0;
  SQLServerEdit.Text := 'localhost\SQLEXPRESS';

  SQLDataDirLabel := TNewStaticText.Create(SQLConfigPage);
  SQLDataDirLabel.Parent := SQLConfigPage.Surface;
  SQLDataDirLabel.Caption := 'SQL Server Data Directory (e.g., C:\Program Files\Microsoft SQL Server\...):';
  SQLDataDirLabel.Top := SQLServerEdit.Top + SQLServerEdit.Height + 20;
  SQLDataDirLabel.Left := 0;

  SQLDataDirEdit := TEdit.Create(SQLConfigPage);
  SQLDataDirEdit.Parent := SQLConfigPage.Surface;
  SQLDataDirEdit.Width := SQLConfigPage.SurfaceWidth - 80;
  SQLDataDirEdit.Top := SQLDataDirLabel.Top + SQLDataDirLabel.Height + 5;
  SQLDataDirEdit.Left := 0;
  SQLDataDirEdit.Text := 'C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA';

  SQLDataDirButton := TButton.Create(SQLConfigPage);
  SQLDataDirButton.Parent := SQLConfigPage.Surface;
  SQLDataDirButton.Caption := 'Browse...';
  SQLDataDirButton.Width := 75;
  SQLDataDirButton.Height := 25;
  SQLDataDirButton.Top := SQLDataDirEdit.Top;
  SQLDataDirButton.Left := SQLDataDirEdit.Width + 5;
  SQLDataDirButton.OnClick := @SQLDataDirButtonClick;

  SQLDatabaseLabel := TNewStaticText.Create(SQLConfigPage);
  SQLDatabaseLabel.Parent := SQLConfigPage.Surface;
  SQLDatabaseLabel.Caption := 'Database Name (e.g., GuthPumpDB):';
  SQLDatabaseLabel.Top := SQLDataDirEdit.Top + SQLDataDirEdit.Height + 20;
  SQLDatabaseLabel.Left := 0;

  SQLDatabaseEdit := TEdit.Create(SQLConfigPage);
  SQLDatabaseEdit.Parent := SQLConfigPage.Surface;
  SQLDatabaseEdit.Width := SQLConfigPage.SurfaceWidth - 10;
  SQLDatabaseEdit.Top := SQLDatabaseLabel.Top + SQLDatabaseLabel.Height + 5;
  SQLDatabaseEdit.Left := 0;
  SQLDatabaseEdit.Text := 'GuthPumpDB';

  
  SQLUsernameLabel := TNewStaticText.Create(SQLConfigPage);
  SQLUsernameLabel.Parent := SQLConfigPage.Surface;
  SQLUsernameLabel.Caption := 'SQL Username (e.g., sa):';
  SQLUsernameLabel.Top := SQLDatabaseEdit.Top + SQLDatabaseEdit.Height + 20;
  SQLUsernameLabel.Left := 0;

  SQLUsernameEdit := TEdit.Create(SQLConfigPage);
  SQLUsernameEdit.Parent := SQLConfigPage.Surface;
  SQLUsernameEdit.Width := SQLConfigPage.SurfaceWidth - 10;
  SQLUsernameEdit.Top := SQLUsernameLabel.Top + SQLUsernameLabel.Height + 5;
  SQLUsernameEdit.Left := 0;
  SQLUsernameEdit.Text := 'sa';

  SQLPasswordLabel := TNewStaticText.Create(SQLConfigPage);
  SQLPasswordLabel.Parent := SQLConfigPage.Surface;
  SQLPasswordLabel.Caption := 'SQL Password:';
  SQLPasswordLabel.Top := SQLUsernameEdit.Top + SQLUsernameEdit.Height + 20;
  SQLPasswordLabel.Left := 0;

  SQLPasswordEdit := TEdit.Create(SQLConfigPage);
  SQLPasswordEdit.Parent := SQLConfigPage.Surface;
  SQLPasswordEdit.Width := SQLConfigPage.SurfaceWidth - 10;
  SQLPasswordEdit.Top := SQLPasswordLabel.Top + SQLPasswordLabel.Height + 5;
  SQLPasswordEdit.Left := 0;
  SQLPasswordEdit.PasswordChar := '*';
  SQLPasswordEdit.Text := 'Password123!';
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
  ConfigFile: String;
  ConfigContent: String;
begin
  if CurStep = ssPostInstall then
  begin
    ConfigFile := ExpandConstant('{app}\config.json');
    ConfigContent := '{';
    ConfigContent := ConfigContent + #13#10 + '  "sql_server": "' + EscapeJsonString(SQLServerEdit.Text) + '",';
    ConfigContent := ConfigContent + #13#10 + '  "sql_data_dir": "' + EscapeJsonString(SQLDataDirEdit.Text) + '",';
    ConfigContent := ConfigContent + #13#10 + '  "database": "' + EscapeJsonString(SQLDatabaseEdit.Text) + '",';
    ConfigContent := ConfigContent + #13#10 + '  "username": "' + EscapeJsonString(SQLUsernameEdit.Text) + '",';
    ConfigContent := ConfigContent + #13#10 + '  "password": "' + EscapeJsonString(SQLPasswordEdit.Text) + '",';
    ConfigContent := ConfigContent + #13#10 + '  "log_file": "app.log"';
    ConfigContent := ConfigContent + #13#10 + '}';
    if not SaveStringToFile(ConfigFile, ConfigContent, False) then
      MsgBox('Failed to save config.json', mbError, MB_OK);
  end;
end;